// Generated by gencpp from file ArmControl/angle_msg.msg
// DO NOT EDIT!


#ifndef ARMCONTROL_MESSAGE_ANGLE_MSG_H
#define ARMCONTROL_MESSAGE_ANGLE_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ArmControl
{
template <class ContainerAllocator>
struct angle_msg_
{
  typedef angle_msg_<ContainerAllocator> Type;

  angle_msg_()
    : angles(0.0)  {
    }
  angle_msg_(const ContainerAllocator& _alloc)
    : angles(0.0)  {
  (void)_alloc;
    }



   typedef double _angles_type;
  _angles_type angles;





  typedef boost::shared_ptr< ::ArmControl::angle_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ArmControl::angle_msg_<ContainerAllocator> const> ConstPtr;

}; // struct angle_msg_

typedef ::ArmControl::angle_msg_<std::allocator<void> > angle_msg;

typedef boost::shared_ptr< ::ArmControl::angle_msg > angle_msgPtr;
typedef boost::shared_ptr< ::ArmControl::angle_msg const> angle_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ArmControl::angle_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ArmControl::angle_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ArmControl::angle_msg_<ContainerAllocator1> & lhs, const ::ArmControl::angle_msg_<ContainerAllocator2> & rhs)
{
  return lhs.angles == rhs.angles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ArmControl::angle_msg_<ContainerAllocator1> & lhs, const ::ArmControl::angle_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ArmControl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ArmControl::angle_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ArmControl::angle_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ArmControl::angle_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ArmControl::angle_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ArmControl::angle_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ArmControl::angle_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ArmControl::angle_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22b07857a56aae829de3d30b31b536a0";
  }

  static const char* value(const ::ArmControl::angle_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22b07857a56aae82ULL;
  static const uint64_t static_value2 = 0x9de3d30b31b536a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ArmControl::angle_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ArmControl/angle_msg";
  }

  static const char* value(const ::ArmControl::angle_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ArmControl::angle_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 angles\n"
;
  }

  static const char* value(const ::ArmControl::angle_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ArmControl::angle_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct angle_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ArmControl::angle_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ArmControl::angle_msg_<ContainerAllocator>& v)
  {
    s << indent << "angles: ";
    Printer<double>::stream(s, indent + "  ", v.angles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARMCONTROL_MESSAGE_ANGLE_MSG_H
